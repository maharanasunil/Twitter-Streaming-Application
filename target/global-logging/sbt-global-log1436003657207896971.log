[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\LENOVO\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\LENOVO\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 1.8.0_311)
[debug]       Load.loadUnit: plugins took 854.8439ms
[debug]       Load.loadUnit: defsScala took 0.7289ms
[debug] [Loading] Scanning directory C:\Users\LENOVO\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\LENOVO\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 132.6053 ms
[debug]           Load.resolveProject(global-plugins) took 310.0912ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\LENOVO\.sbt\1.0\plugins, plugins: List(<none>))) took 791.1473ms
[debug] [Loading] Done in C:\Users\LENOVO\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 923.7611ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4948ms
[debug]     Load.loadUnit(file:/C:/Users/LENOVO/.sbt/1.0/plugins/, ...) took 2071.008899ms
[debug]   Load.apply: load took 3767.544299ms
[debug]   Load.apply: resolveProjects took 26.2779ms
[debug]   Load.apply: finalTransforms took 672.3496ms
[debug]   Load.apply: config.delegates took 79.9725ms
[debug]   Load.apply: Def.make(settings)... took 6041.809599ms
[debug]   Load.apply: structureIndex took 872.9081ms
[debug]   Load.apply: mkStreams took 3.039101ms
[info] loading global plugins from C:\Users\LENOVO\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 26157.4799ms
[debug]           Load.loadUnit: plugins took 44.247601ms
[debug]           Load.loadUnit: defsScala took 0.0087ms
[debug] [Loading] Scanning directory C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse\project
[debug]             Load.loadUnit: mkEval took 10.5984ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.189901 ms
[info] loading settings for project sparkscalacourse-build from idea.sbt ...
[debug]               Load.resolveProject(sparkscalacourse-build) took 48.8575ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkscalacourse-build, base: C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse\project, plugins: List(<none>))) took 61.3658ms
[debug] [Loading] Done in C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse\project, returning: (sparkscalacourse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 320.6523ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.843199ms
[debug]         Load.loadUnit(file:/C:/Users/LENOVO/Desktop/Udemy%20Courses/SparkScalaCourse/project/, ...) took 378.2769ms
[debug]       Load.apply: load took 382.332ms
[debug]       Load.apply: resolveProjects took 0.152ms
[debug]       Load.apply: finalTransforms took 23.793299ms
[debug]       Load.apply: config.delegates took 1.7447ms
[debug]       Load.apply: Def.make(settings)... took 307.0846ms
[debug]       Load.apply: structureIndex took 105.890901ms
[debug]       Load.apply: mkStreams took 0.003899ms
[info] loading project definition from C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1465.450999ms
[debug]     Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse
[debug]       Load.loadUnit: mkEval took 0.4447ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 7.5756 ms
[info] loading settings for project sparkscalacourse from build.sbt ...
[debug]         Load.resolveProject(sparkscalacourse) took 109.296099ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkscalacourse, base: C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse, plugins: List(<none>))) took 120.317901ms
[debug] [Loading] Done in C:\Users\LENOVO\Desktop\Udemy Courses\SparkScalaCourse, returning: (sparkscalacourse)
[debug]     Load.loadUnit: loadedProjectsRaw took 225.3275ms
[debug]     Load.loadUnit: cleanEvalClasses took 53.6672ms
[debug]   Load.loadUnit(file:/C:/Users/LENOVO/Desktop/Udemy%20Courses/SparkScalaCourse/, ...) took 1746.1264ms
[debug] Load.apply: load took 1762.595001ms
[debug] Load.apply: resolveProjects took 0.1558ms
[debug] Load.apply: finalTransforms took 182.205701ms
[debug] Load.apply: config.delegates took 0.4277ms
[debug] Load.apply: Def.make(settings)... took 337.0282ms
[debug] Load.apply: structureIndex took 93.6286ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to SparkScalaCourse (in build file:/C:/Users/LENOVO/Desktop/Udemy%20Courses/SparkScalaCourse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61743 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61743, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkScalaCourse (in build file:/C:/Users/LENOVO/Desktop/Udemy%20Courses/SparkScalaCourse/)
[debug] > Exec(idea-shell, None, None)
